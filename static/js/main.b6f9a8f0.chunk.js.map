{"version":3,"sources":["CryptocompareBtc.js","CryptocompareEth.js","CoinLayerBtc.js","CoinLayerEth.js","PriceCompare.js","bitcoin-logo.png","eth-logo.png","App.js","index.js"],"names":["CryptocompareBtc","useState","price","setPrice","loading","setLoading","useEffect","fetch","then","res","json","data","USD","catch","error","console","log","className","CryptocompareEth","CoinLayerBtc","amount","CoinLayerEth","rates","PriceCompare","WhereBTC","setBTCName","WhereETH","setETHName","WhereSellBTC","setsellBTC","WhereSellETH","setsellETH","Promise","all","responses","map","response","parseFloat","App","src","btclogo","alt","ethlogo","onClick","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f9a8f0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// import logo from \"./bitcoin-logo.png\";\r\n\r\n\r\nconst CryptocompareBtc = () => {\r\n  const [price, setPrice] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=BTC,USD\")\r\n      .then((res) => res.json())\r\n      .then((data) => {        \r\n        setPrice(data.USD); \r\n        setLoading(false);       \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"btc\">\r\n      <h3>Cryptocompare Bitcoin Price</h3>\r\n      <span className=\"btc-price\">{loading ? \"LOADING\" : \"$\" + price}</span>      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptocompareBtc;","import React, { useState, useEffect } from \"react\";\r\n// import logo from \"./bitcoin-logo.png\";\r\n\r\n\r\nconst CryptocompareEth = () => {\r\n  const [price, setPrice] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    fetch(\"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=ETH,USD\")\r\n      .then((res) => res.json())\r\n      .then((data) => {        \r\n        setPrice(data.USD); \r\n        setLoading(false);       \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"btc\">\r\n      <h3>Cryptocompare Ethereum Price</h3>\r\n      <span className=\"btc-price\">{loading ? \"LOADING\" : \"$\" + price}</span>      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptocompareEth;","import React, { useState, useEffect } from \"react\";\r\n// import logo from \"./bitcoin-logo.png\";\r\n\r\n\r\nconst CoinLayerBtc = () => {\r\n  const [price, setPrice] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    fetch(\"https://api.coinbase.com/v2/prices/spot?currency=USD\")\r\n      .then((res) => res.json())\r\n      .then((data) => {        \r\n        setPrice(data.data.amount); \r\n        setLoading(false);       \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"btc\">\r\n      <h3>Coinbase Bitcoin Price</h3>\r\n      <span className=\"btc-price\">{loading ? \"LOADING\" : \"$\" + price}</span>      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoinLayerBtc;","import React, { useState, useEffect } from \"react\";\r\n// import logo from \"./bitcoin-logo.png\";\r\n\r\n\r\nconst CoinLayerEth = () => {\r\n  const [price, setPrice] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    fetch(\"https://api.coinbase.com/v2/exchange-rates?currency=ETH\")\r\n      .then((res) => res.json())\r\n      .then((data) => {        \r\n        setPrice(data.data.rates.USD); \r\n        setLoading(false);       \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"btc\">\r\n      <h3>Coinbase Ethereum Price</h3>\r\n      <span className=\"btc-price\">{loading ? \"LOADING\" : \"$\" + price}</span>      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoinLayerEth;","import React, { useState, useEffect } from \"react\";\r\n// import logo from \"./bitcoin-logo.png\";\r\n\r\n\r\nconst PriceCompare = () => {\r\n  const [WhereBTC, setBTCName] = useState(null);\r\n  const [WhereETH, setETHName] = useState(null);\r\n  const [WhereSellBTC, setsellBTC] = useState(null);\r\n  const [WhereSellETH, setsellETH] = useState(null);\r\n  const urls = [\"http://api.coinlayer.com/api/live?access_key=7909ef414546b1a00cce0cecf7adcc9a&symbols=%20BTC,ETH\", \"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=BTC,USD\",\"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=ETH,USD\"]\r\n\r\n  Promise.all([\r\n    fetch(\"https://api.coinbase.com/v2/prices/spot?currency=USD\"), \r\n    fetch(\"https://api.coinbase.com/v2/exchange-rates?currency=ETH\"), \r\n    fetch(\"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=BTC,USD\"),\r\n    fetch(\"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=ETH,USD\")\r\n  ]).then(function (responses) {\r\n    // Get a JSON object from each of the responses\r\n    return Promise.all(responses.map(function (response) {\r\n      return response.json();\r\n    }));\r\n  }).then(function (data) {\r\n    // data[0] BTC data.data.amount\r\n    // data[1] ETH data.data.rates.USD\r\n    // data[2] compare BTC .USD\r\n    // data[3] compare ETH .USD\r\n    // You would do something with both sets of data here\r\n    //console.log(data[3]);\r\n    if(parseFloat(data[0].data.amount) < parseFloat(data[2].USD)){\r\n      setBTCName('Coinbase')\r\n      setsellBTC('CryptoCompare')\r\n    }\r\n    if(parseFloat(data[0].data.amount) > parseFloat(data[2].USD)){\r\n      setBTCName('CryptoCompare')\r\n      setsellBTC('Coinbase')\r\n    }\r\n    if(parseFloat(data[0].data.amount) == parseFloat(data[2].USD)){\r\n      setBTCName('You can purchase or sell on both platforms since the price is the same.')\r\n    }\r\n    if(parseFloat(data[1].data.rates.USD) < parseFloat(data[3].USD)){\r\n      setETHName('Coinbase')\r\n      setsellETH('CryptoCompare')\r\n    }\r\n    if(parseFloat(data[1].data.rates.USD) > parseFloat(data[3].USD)){\r\n      setETHName('CryptoCompare')\r\n      setsellETH('Coinbase')\r\n    }\r\n    if(parseFloat(data[1].data.rates.USD) == parseFloat(data[3].USD)){\r\n      setETHName('You can purchase or sell on both platforms since the price is the same.')\r\n    }\r\n    \r\n  }).catch(function (error) {\r\n    // if there's an error, log it\r\n    console.log(error);\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"btc\">\r\n      <h3>Where to buy BTC at the moment?</h3>\r\n      <span className=\"btc-where\">{WhereBTC}</span> \r\n      <h3>Where to sell BTC at the moment?</h3>\r\n      <span className=\"btc-where\">{WhereSellBTC}</span> \r\n      <h3>Where to buy ETH at the moment?</h3>\r\n      <span className=\"eth-where\">{WhereETH}</span>\r\n      <h3>Where to buy ETH at the moment?</h3>\r\n      <span className=\"eth-where\">{WhereSellETH}</span>     \r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default PriceCompare;","export default __webpack_public_path__ + \"static/media/bitcoin-logo.02601cd9.png\";","export default __webpack_public_path__ + \"static/media/eth-logo.646e426a.png\";","import CryptocompareBtc from './CryptocompareBtc';\nimport CryptocompareEth from './CryptocompareEth';\nimport CoinLayerBtc from './CoinLayerBtc';\nimport CoinLayerEth from './CoinLayerEth';\nimport PriceCompare from './PriceCompare';\nimport './App.css';\nimport btclogo from \"./bitcoin-logo.png\";\nimport ethlogo from \"./eth-logo.png\";\nfunction App() {\n  function refreshPage() {\n    window.location.reload();\n  }\n  \n  return (\n    <div className=\"App\">\n      <div>\n      <img className=\"photo\" src={btclogo} alt=\"btc logo\"/>\n      </div>\n      <CryptocompareBtc />\n      <CoinLayerBtc />\n      <div>\n      <img className=\"photo\" src={ethlogo} alt=\"eth logo\"/>\n      </div>\n      <CryptocompareEth />\n      <CoinLayerEth />\n      {' '}\n      <PriceCompare />\n      <div>\n        \n      </div>\n      <button onClick={refreshPage}>Refresh</button>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}